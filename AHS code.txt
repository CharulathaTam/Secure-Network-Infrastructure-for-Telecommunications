#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>

#define DHTPIN 33
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

int fanPin = 27;
int temp = 0;
int setTemp = 31;

int turbidityPin = 36;
int motor1Pin = 14;
int motor2Pin = 15;
int turbidity = 0;

LiquidCrystal_I2C lcd(0x3f, 16, 2);
//SDA pin on the LCD to the SDA pin on the ESP32 board (usually pin 21)
//SCL pin on the LCD to the SCL pin on the ESP32 board (usually pin 22)

const char* ssid = "KLH BH";
const char* password = "klh@80y5";

AsyncWebServer server(80);

void setup() {
  pinMode(fanPin, OUTPUT); // set fan pin as output
  pinMode(turbidityPin, INPUT); // set turbidity sensor pin as input
  pinMode(motor1Pin, OUTPUT); // set motor 1 pin as output
  pinMode(motor2Pin, OUTPUT); // set motor 2 pin as output
  
  Serial.begin(9600); // initialize serial communication
  dht.begin(); // initialize DHT11 sensor
  lcd.init(); // initialize LCD
  lcd.backlight(); // turn on backlight
  
  lcd.setCursor(0,0);
  lcd.print("Temp: ");
  lcd.setCursor(0,1);
  lcd.print("Humidity: ");
  lcd.setCursor(10,0);
  lcd.print("Turbidity: ");
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  // Print the WiFi connection details
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

// Configure web server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
     String html = "<html>";
     
    html += "<head><style>body { background-image: url('https://images.pexels.com/photos/4199758/pexels-photo-4199758.jpeg?cs=srgb&dl=pexels-pragyan-bezbaruah-4199758.jpg&fm=jpg'); }</style></head>";
    html += "<body>";
     String motorStatus = "Off";
  if (digitalRead(motor1Pin) == HIGH && digitalRead(motor2Pin) == LOW) {
    motorStatus = "Draining";
  } else if (digitalRead(motor1Pin) == LOW && digitalRead(motor2Pin) == HIGH) {
    motorStatus = "Adding Fresh Water";
  }
    html += "<h1><center><u>Welcome to the Hydroponi System</u></center></font color></h1>";
    html += "<h2>Current Temperature: " + String(temp) + " C</h2>";
    html += "<h2>Current Turbidity: " + String(turbidity) + "</h2>";
    html += "<h2>Current Humidity: " + String(dht.readHumidity()) + "%</h2>";
    html += "<h2>Fan Control</h2>";
    html += "<form method='post' action='/fan'>";
    html += "<input type='submit' name='fan' value='On'>";
    html += "<input type='submit' name='fan' value='Off'>";
    html += "</form>";
    html += "<h2><center>Water Control</center></h2>";
    html += "<form method='post' action='/water'>";
    html += "<input type='submit' name='water' value='Drain and Add Fresh Water'>";
    html += "<h2><center>Motor Status: " + motorStatus + "</center></h2>";
  html += "</body></html>";
    html += "</form>";
    html += "</body></html>";
  
 
 
  
  request->send(200, "text/html", html);
});
  

  server.on("/fan", HTTP_POST, [](AsyncWebServerRequest *request){
    if (request->hasParam("fan")) {
      String fanStatus = request->getParam("fan")->value();
      if (fanStatus == "On") {
        digitalWrite(fanPin, HIGH);
      } else if (fanStatus == "Off") {
        digitalWrite(fanPin, LOW);
      }
    }
        request->send(200);
  });

  server.on("/water", HTTP_POST, [](AsyncWebServerRequest *request){
    digitalWrite(motor1Pin, HIGH);
    digitalWrite(motor2Pin, LOW);
    delay(5000);
    digitalWrite(motor1Pin, LOW);
    digitalWrite(motor2Pin, LOW);
    request->send(200);
  });

  server.begin();
}void loop() {
  delay(2000); // wait for 2 seconds
  float humidity = dht.readHumidity(); // read humidity from DHT11
  float temperature = dht.readTemperature(); // read temperature from DHT11 in Celsius
  
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT11 sensor!"); // error message if failed to read from DHT11
    temp=setTemp;
  }else{
    
  
  
  temp = temperature; // assign temperature value to temp variable
  }
  
  lcd.setCursor(0,0);
  lcd.print("Temperature: ");
  lcd.print(temp);
  lcd.print(" C ");
  
  lcd.setCursor(0,1);
    lcd.print("Turbidity: ");
  lcd.print(turbidity);
  lcd.print("%   ");

  
  Serial.print("Temperature: ");
  Serial.print(temp);
  Serial.print(" C  Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  delay(2000); // wait for 2 seconds
  lcd.setCursor(0,1);
  lcd.print("Humidity: ");
  lcd.print(humidity);
  lcd.print(" %");
turbidity = analogRead(turbidityPin);
  lcd.setCursor(0,0);
  lcd.print("                "); // clear the first line of the LCD display
  
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %  Turbidity: ");
  Serial.println(turbidity);
  
  
  delay(2000); // wait for 2 seconds
  if (temp > setTemp) {
    digitalWrite(fanPin, HIGH); // turn on fan if temperature is above set temperature
    Serial.println("Fan is on");
  }
   else if (temp < setTemp) {
    digitalWrite(fanPin, HIGH); // turn on fan if temperature is above set temperature
    Serial.println("Fan is on");
   }
    
  else{
    digitalWrite(fanPin, LOW); // turn off fan if temperature is below set temperature
    Serial.println("Fan is off");
  
  }
  // turbidity sensor
 // turbidity sensor
  turbidity = analogRead(turbidityPin); // read turbidity value from sensor
  Serial.print("Turbidity: ");
  Serial.println(turbidity); 

  lcd.setCursor(0,0);
  lcd.print("Temperature: ");
  lcd.print(temp);
  lcd.print(" C ");

  lcd.setCursor(0,1);
  lcd.print("Turbidity   : ");
  lcd.print(turbidity);
  Serial.println("Motors are off");
    lcd.setCursor(0,1);
    lcd.print("Motors are off     ");

  if (turbidity < 500) {
    digitalWrite(motor1Pin, HIGH); // turn on motor 1 to drain water if turbidity is high
    Serial.println("Motor 1 is on");
    lcd.setCursor(0,1);
    lcd.print("Draining water...  ");
    while(1){
     Serial.print("Turbidity: ");
  Serial.println(turbidity); 
    int turbidityPin = 36;
     turbidity = analogRead(turbidityPin); // read turbidity value from sensor
    if(turbidity >=3000)
    {
    digitalWrite(motor1Pin, LOW); // turn off motor 1 after draining water
    Serial.println("Motor 1 is off");
    lcd.setCursor(0,1);
    lcd.print(" fresh water .");
    delay(5000); // wait for 5 seconds to add fresh water
    digitalWrite(motor2Pin, HIGH); // turn on motor 2 to add fresh water
    Serial.println("Motor 2 is on");
    lcd.setCursor(0,1);
    lcd.print(" water added. ");
    delay(5000); // wait for 5 seconds to add fresh water
    digitalWrite(motor2Pin, LOW); // turn off motor 2 after adding fresh water
    Serial.println("Motor 2 is off");
    lcd.setCursor(0,1);
    lcd.print("Water cycle done.  ");
    break;
    
  }   }
  }
}